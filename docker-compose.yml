version: '3.5'

services:
  neo4j:
    image: s34n/neo4j-img
    ports:
    - '7474:7474'
    - '7473:7473'
    - '7687:7687'
    environment:
    - NEO4J_AUTH=neo4j/neo4spring_cloud
    networks:
    - db_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  rabbitmq:
    image: s34n/rmq-img
    ports:
    - '15671:15671'
    - '15672:15672'
    - '5672:5672'
    - '25672:25672'
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
    - que_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  zipkin:
    image: s34n/zipkin-img
    ports:
    - '9410:9410'
    - '9411:9411'
    networks:
    - que_net
    environment:
    - ZIPKIN_LOG_LEVEL=DEBUG
    - RABBIT_URI=amqp://admin:admin@rabbitmq:5672
    depends_on:
    - rabbitmq
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  eureka:
    image: s34n/eureka-img
    ports:
    - '8001:8001'
    networks:
    - service_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  config:
    image: s34n/config-img
    ports:
    - '8002:8002'
    networks:
    - service_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  leader-data:
    image: s34n/leader-data-img
    ports:
    - '8003:8003'
    networks:
    - service_net
    - db_net
    depends_on:
    - neo4j
    - config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  leaderboard:
    image: s34n/leaderboard-img
    ports:
    - '8004:8004'
    networks:
    - service_net
    depends_on:
    - leader-data
    - config
    deploy:
      replicas: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  zuul:
    image: s34n/zuul-img
    ports:
    - '8005:8005'
    networks:
    - service_net
    - api_gateway_net
    depends_on:
    - leaderboard
    - game
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  game:
    image: s34n/game-img
    ports:
    - '8006:8006'
    networks:
    - service_net
    depends_on:
    - config
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  sciroc:
    image: s34n/sciroc-img
    ports:
    - '80:8000'
    networks:
    - api_gateway_net
    depends_on:
    - config
    - zuul
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  db_net:
    driver: overlay
  que_net:
    driver: overlay
  service_net:
    driver: overlay
  api_gateway_net:
    driver: overlay

